/**
 * Examples of automatic tests for the exercise on physical numbers.
 *
 * @author Erel Segal-Halevi
 * @since 2019-02
 */

#include <iostream>
#include <sstream>
using std::cout, std::endl, std::istringstream;
#include "PhysicalNumber.h"
using ariel::PhysicalNumber, ariel::Unit;
#include "badkan.hpp"

int main()
{
    badkan::TestCase testcase;
    int grade = 0;
    int signal = setjmp(badkan::longjmp_buffer);
    if (signal == 0)
    {
        // BASIC TESTS - DO NOT CHANGE
        PhysicalNumber a(2, Unit::KM);
        PhysicalNumber b(300, Unit::M);
        PhysicalNumber c(2, Unit::HOUR);
        PhysicalNumber d(30, Unit::MIN);
        // CUSTOM TESTING
        // Length
        PhysicalNumber cm(10, Unit::CM);
        PhysicalNumber met(500, Unit::M);
        PhysicalNumber km(3, Unit::CM);
        // Time
        PhysicalNumber s(45, Unit::SEC);
        PhysicalNumber min(10, Unit::MIN);
        PhysicalNumber h(10, Unit::HOUR);
        // Weight
        PhysicalNumber g(100, Unit::G);
        PhysicalNumber kg(6, Unit::KG);
        PhysicalNumber t(2, Unit::TON);

        testcase
            .setname("Basic output")
            .CHECK_OUTPUT(a, "2[km]")
            .CHECK_OUTPUT(b, "300[m]")

            .setname("Compatible dimensions")
            .CHECK_OUTPUT(b + a, "2300[m]")
            .CHECK_OUTPUT((a += b), "2.3[km]")
            .CHECK_OUTPUT(a, "2.3[km]")
            .CHECK_OUTPUT(a + a, "4.6[km]")
            .CHECK_OUTPUT(b - b, "0[m]")
            .CHECK_OUTPUT(c, "2[hour]")
            .CHECK_OUTPUT(d, "30[min]")
            .CHECK_OUTPUT(d + c, "150[min]")

            .setname("Incompatible dimensions")
            .CHECK_THROWS(a + c)
            .CHECK_THROWS(a + d)
            .CHECK_THROWS(b + c)
            .CHECK_THROWS(b + d)

            .setname("Basic input")
            .CHECK_OK(istringstream("700[kg]") >> a)
            .CHECK_OUTPUT((a += PhysicalNumber(1, Unit::TON)), "1700[kg]")

            // YOUR TESTS - INSERT AS MANY AS YOU WANT
            // CUSTOM TESTS
            .setname("Compatiblility")
            // Length with time
            // CM with time
            .CHECK_THROWS(cm + s)
            .CHECK_THROWS(cm + min)
            .CHECK_THROWS(cm + h)
            .CHECK_THROWS(cm - s)
            .CHECK_THROWS(cm - min)
            .CHECK_THROWS(cm - h)
            .CHECK_THROWS(cm > s)
            .CHECK_THROWS(cm < s)
            .CHECK_THROWS(cm >= s)
            .CHECK_THROWS(cm <= s)
            .CHECK_THROWS(cm != s)
            .CHECK_THROWS(cm == s)
            .CHECK_THROWS((cm += PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((cm += PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((cm += PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS(cm > min)
            .CHECK_THROWS(cm < min)
            .CHECK_THROWS(cm >= min)
            .CHECK_THROWS(cm <= min)
            .CHECK_THROWS(cm != min)
            .CHECK_THROWS(cm == min)
            .CHECK_THROWS((cm += PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((cm += PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((cm += PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS(cm > h)
            .CHECK_THROWS(cm < h)
            .CHECK_THROWS(cm >= h)
            .CHECK_THROWS(cm <= h)
            .CHECK_THROWS(cm != h)
            .CHECK_THROWS(cm == h)
            .CHECK_THROWS((cm += PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((cm += PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((cm += PhysicalNumber(100, Unit::HOUR)))
            .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::HOUR)))

            // METER with time
            .CHECK_THROWS(met + s)
            .CHECK_THROWS(met + min)
            .CHECK_THROWS(met + h)
            .CHECK_THROWS(met - s)
            .CHECK_THROWS(met - min)
            .CHECK_THROWS(met - h)
            .CHECK_THROWS(met > s)
            .CHECK_THROWS(met < s)
            .CHECK_THROWS(met >= s)
            .CHECK_THROWS(met <= s)
            .CHECK_THROWS(met != s)
            .CHECK_THROWS(met == s)
            .CHECK_THROWS((met += PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((met += PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((met += PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((met += PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS((met -= PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((met -= PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((met -= PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((met -= PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS(met > min)
            .CHECK_THROWS(met < min)
            .CHECK_THROWS(met >= min)
            .CHECK_THROWS(met <= min)
            .CHECK_THROWS(met != min)
            .CHECK_THROWS(met == min)
            .CHECK_THROWS((met += PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((met += PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((met += PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((met += PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS((met -= PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((met -= PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((met -= PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((met -= PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS(met > h)
            .CHECK_THROWS(met < h)
            .CHECK_THROWS(met >= h)
            .CHECK_THROWS(met <= h)
            .CHECK_THROWS(met != h)
            .CHECK_THROWS(met == h)
            .CHECK_THROWS((met += PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((met += PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((met += PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((met += PhysicalNumber(100, Unit::HOUR)))
            .CHECK_THROWS((met -= PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((met -= PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((met -= PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((met -= PhysicalNumber(100, Unit::HOUR)))
            // KM with time
            .CHECK_THROWS(km + s)
            .CHECK_THROWS(km + min)
            .CHECK_THROWS(km + h)
            .CHECK_THROWS(km - s)
            .CHECK_THROWS(km - min)
            .CHECK_THROWS(km - h)
            .CHECK_THROWS(km > s)
            .CHECK_THROWS(km < s)
            .CHECK_THROWS(km >= s)
            .CHECK_THROWS(km <= s)
            .CHECK_THROWS(km != s)
            .CHECK_THROWS(km == s)
            .CHECK_THROWS((km += PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((km += PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((km += PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((km += PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS((km -= PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((km -= PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((km -= PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS(km > min)
            .CHECK_THROWS(km < min)
            .CHECK_THROWS(km >= min)
            .CHECK_THROWS(km <= min)
            .CHECK_THROWS(km != min)
            .CHECK_THROWS(km == min)
            .CHECK_THROWS((km += PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((km += PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((km += PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((km += PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS((km -= PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((km -= PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((km -= PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS(km > h)
            .CHECK_THROWS(km < h)
            .CHECK_THROWS(km >= h)
            .CHECK_THROWS(km <= h)
            .CHECK_THROWS(km != h)
            .CHECK_THROWS(km == h)
            .CHECK_THROWS((km += PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((km += PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((km += PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((km += PhysicalNumber(100, Unit::HOUR)))
            .CHECK_THROWS((km -= PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((km -= PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((km -= PhysicalNumber(100, Unit::HOUR)))
            ////////////////////////////////////////////////////////////////////
            // TIME with length
            // sec with length
            .CHECK_THROWS(s + cm)
            .CHECK_THROWS(s + met)
            .CHECK_THROWS(s + km)
            .CHECK_THROWS(s - cm)
            .CHECK_THROWS(s - met)
            .CHECK_THROWS(s - km)
            .CHECK_THROWS(s > cm)
            .CHECK_THROWS(s < cm)
            .CHECK_THROWS(s >= cm)
            .CHECK_THROWS(s <= cm)
            .CHECK_THROWS(s != cm)
            .CHECK_THROWS(s == cm)
            .CHECK_THROWS((s += PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((s += PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((s += PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((s += PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS((s -= PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((s -= PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((s -= PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS(s > met)
            .CHECK_THROWS(s < met)
            .CHECK_THROWS(s >= met)
            .CHECK_THROWS(s <= met)
            .CHECK_THROWS(s != met)
            .CHECK_THROWS(s == met)
            .CHECK_THROWS((s += PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((s += PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((s += PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((s += PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS((s -= PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((s -= PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((s -= PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS(s > km)
            .CHECK_THROWS(s < km)
            .CHECK_THROWS(s >= km)
            .CHECK_THROWS(s <= km)
            .CHECK_THROWS(s != km)
            .CHECK_THROWS(s == km)
            .CHECK_THROWS((s += PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((s += PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((s += PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((s += PhysicalNumber(100, Unit::KM)))
            .CHECK_THROWS((s -= PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((s -= PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((s -= PhysicalNumber(100, Unit::KM)))
            
            // MIN with length
            .CHECK_THROWS(min + cm)
            .CHECK_THROWS(min + met)
            .CHECK_THROWS(min + km)
            .CHECK_THROWS(min - cm)
            .CHECK_THROWS(min - met)
            .CHECK_THROWS(min - km)
            .CHECK_THROWS(min > cm)
            .CHECK_THROWS(min < cm)
            .CHECK_THROWS(min >= cm)
            .CHECK_THROWS(min <= cm)
            .CHECK_THROWS(min != cm)
            .CHECK_THROWS(min == cm)
            .CHECK_THROWS((min += PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((min += PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((min += PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((min += PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS((min -= PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((min -= PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((min -= PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS(min > met)
            .CHECK_THROWS(min < met)
            .CHECK_THROWS(min >= met)
            .CHECK_THROWS(min <= met)
            .CHECK_THROWS(min != met)
            .CHECK_THROWS(min == met)
            .CHECK_THROWS((min += PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((min += PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((min += PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((min += PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS((min -= PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((min -= PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((min -= PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS(min > km)
            .CHECK_THROWS(min < km)
            .CHECK_THROWS(min >= km)
            .CHECK_THROWS(min <= km)
            .CHECK_THROWS(min != km)
            .CHECK_THROWS(min == km)
            .CHECK_THROWS((min += PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((min += PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((min += PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((min += PhysicalNumber(100, Unit::KM)))
            .CHECK_THROWS((min -= PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((min -= PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((min -= PhysicalNumber(100, Unit::KM)))

            // HOUR with length
            .CHECK_THROWS(h + cm)
            .CHECK_THROWS(h + met)
            .CHECK_THROWS(h + km)
            .CHECK_THROWS(h - cm)
            .CHECK_THROWS(h - met)
            .CHECK_THROWS(h - km)
            .CHECK_THROWS(h > cm)
            .CHECK_THROWS(h < cm)
            .CHECK_THROWS(h >= cm)
            .CHECK_THROWS(h <= cm)
            .CHECK_THROWS(h != cm)
            .CHECK_THROWS(h == cm)
            .CHECK_THROWS((h += PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((h += PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((h += PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((h += PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS((h -= PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((h -= PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((h -= PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS(h > met)
            .CHECK_THROWS(h < met)
            .CHECK_THROWS(h >= met)
            .CHECK_THROWS(h <= met)
            .CHECK_THROWS(h != met)
            .CHECK_THROWS(h == met)
            .CHECK_THROWS((h += PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((h += PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((h += PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((h += PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS((h -= PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((h -= PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((h -= PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS(h > km)
            .CHECK_THROWS(h < km)
            .CHECK_THROWS(h >= km)
            .CHECK_THROWS(h <= km)
            .CHECK_THROWS(h != km)
            .CHECK_THROWS(h == km)
            .CHECK_THROWS((h += PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((h += PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((h += PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((h += PhysicalNumber(100, Unit::KM)))
            .CHECK_THROWS((h -= PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((h -= PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((h -= PhysicalNumber(100, Unit::KM)))
            ////////////////////////////////////////////////////////////////////
            .setname("LENGTH TESTS")

            .setname("TIME TESTS")

            .setname("WEIGHT TESTS")

            .print(cout, /*show_grade=*/false);
        grade = testcase.grade();
    }
    else
    {
        testcase.print_signal(signal);
        grade = 0;
    }
    cout << "*** Grade: " << grade << " ***" << endl;
    return grade;
}
