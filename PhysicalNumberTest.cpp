/**
 * Examples of automatic tests for the exercise on physical numbers.
 *
 * @author Erel Segal-Halevi
 * @since 2019-02
 */

#include <iostream>
#include <sstream>
using std::cout, std::endl, std::istringstream;
#include "PhysicalNumber.h"
using ariel::PhysicalNumber, ariel::Unit;
#include "badkan.hpp"

int main()
{
    badkan::TestCase testcase;
    int grade = 0;
    int signal = setjmp(badkan::longjmp_buffer);
    if (signal == 0)
    {
        // BASIC TESTS - DO NOT CHANGE
        PhysicalNumber a(2, Unit::KM);
        PhysicalNumber b(300, Unit::M);
        PhysicalNumber c(2, Unit::HOUR);
        PhysicalNumber d(30, Unit::MIN);
        // CUSTOM TESTING
        // Length
        PhysicalNumber cm(10.0, Unit::CM);
        PhysicalNumber met(5.3, Unit::M);
        PhysicalNumber km(3.3, Unit::KM);
        // Time
        PhysicalNumber s(10.0, Unit::SEC);
        PhysicalNumber min(5.3, Unit::MIN);
        PhysicalNumber h(3.3, Unit::HOUR);
        // Weight
        PhysicalNumber g(10.0, Unit::G);
        PhysicalNumber kg(5.3, Unit::KG);
        PhysicalNumber t(3.3, Unit::TON);

        testcase
            .setname("Basic output")
            .CHECK_OUTPUT(a, "2[km]")
            .CHECK_OUTPUT(b, "300[m]")

            .setname("Compatible dimensions")
            .CHECK_OUTPUT(b + a, "2300[m]")
            .CHECK_OUTPUT((a += b), "2.3[km]")
            .CHECK_OUTPUT(a, "2.3[km]")
            .CHECK_OUTPUT(a + a, "4.6[km]")
            .CHECK_OUTPUT(b - b, "0[m]")
            .CHECK_OUTPUT(c, "2[hour]")
            .CHECK_OUTPUT(d, "30[min]")
            .CHECK_OUTPUT(d + c, "150[min]")

            .setname("Incompatible dimensions")
            .CHECK_THROWS(a + c)
            .CHECK_THROWS(a + d)
            .CHECK_THROWS(b + c)
            .CHECK_THROWS(b + d)

            .setname("Basic input")
            .CHECK_OK(istringstream("700[kg]") >> a)
            .CHECK_OUTPUT((a += PhysicalNumber(1, Unit::TON)), "1700[kg]")

            // YOUR TESTS - INSERT AS MANY AS YOU WANT
            // CUSTOM TESTS
            .setname("Compatiblility")
            .setname("Length with TIME")
            // CM
            .CHECK_THROWS(cm + s)
            .CHECK_THROWS(cm + min)
            .CHECK_THROWS(cm + h)
            .CHECK_THROWS(cm - s)
            .CHECK_THROWS(cm - min)
            .CHECK_THROWS(cm - h)
            .CHECK_THROWS(cm > s)
            .CHECK_THROWS(cm < s)
            .CHECK_THROWS(cm >= s)
            .CHECK_THROWS(cm <= s)
            .CHECK_THROWS(cm != s)
            .CHECK_THROWS(cm == s)
            .CHECK_THROWS((cm += PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((cm += PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((cm += PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS(cm > min)
            .CHECK_THROWS(cm < min)
            .CHECK_THROWS(cm >= min)
            .CHECK_THROWS(cm <= min)
            .CHECK_THROWS(cm != min)
            .CHECK_THROWS(cm == min)
            .CHECK_THROWS((cm += PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((cm += PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((cm += PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS(cm > h)
            .CHECK_THROWS(cm < h)
            .CHECK_THROWS(cm >= h)
            .CHECK_THROWS(cm <= h)
            .CHECK_THROWS(cm != h)
            .CHECK_THROWS(cm == h)
            .CHECK_THROWS((cm += PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((cm += PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((cm += PhysicalNumber(100, Unit::HOUR)))
            .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::HOUR)))
            // METER
            .CHECK_THROWS(met + s)
            .CHECK_THROWS(met + min)
            .CHECK_THROWS(met + h)
            .CHECK_THROWS(met - s)
            .CHECK_THROWS(met - min)
            .CHECK_THROWS(met - h)
            .CHECK_THROWS(met > s)
            .CHECK_THROWS(met < s)
            .CHECK_THROWS(met >= s)
            .CHECK_THROWS(met <= s)
            .CHECK_THROWS(met != s)
            .CHECK_THROWS(met == s)
            .CHECK_THROWS((met += PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((met += PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((met += PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((met += PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS((met -= PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((met -= PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((met -= PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((met -= PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS(met > min)
            .CHECK_THROWS(met < min)
            .CHECK_THROWS(met >= min)
            .CHECK_THROWS(met <= min)
            .CHECK_THROWS(met != min)
            .CHECK_THROWS(met == min)
            .CHECK_THROWS((met += PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((met += PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((met += PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((met += PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS((met -= PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((met -= PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((met -= PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((met -= PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS(met > h)
            .CHECK_THROWS(met < h)
            .CHECK_THROWS(met >= h)
            .CHECK_THROWS(met <= h)
            .CHECK_THROWS(met != h)
            .CHECK_THROWS(met == h)
            .CHECK_THROWS((met += PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((met += PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((met += PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((met += PhysicalNumber(100, Unit::HOUR)))
            .CHECK_THROWS((met -= PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((met -= PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((met -= PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((met -= PhysicalNumber(100, Unit::HOUR)))
            // KM
            .CHECK_THROWS(km + s)
            .CHECK_THROWS(km + min)
            .CHECK_THROWS(km + h)
            .CHECK_THROWS(km - s)
            .CHECK_THROWS(km - min)
            .CHECK_THROWS(km - h)
            .CHECK_THROWS(km > s)
            .CHECK_THROWS(km < s)
            .CHECK_THROWS(km >= s)
            .CHECK_THROWS(km <= s)
            .CHECK_THROWS(km != s)
            .CHECK_THROWS(km == s)
            .CHECK_THROWS((km += PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((km += PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((km += PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((km += PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS((km -= PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((km -= PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((km -= PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS(km > min)
            .CHECK_THROWS(km < min)
            .CHECK_THROWS(km >= min)
            .CHECK_THROWS(km <= min)
            .CHECK_THROWS(km != min)
            .CHECK_THROWS(km == min)
            .CHECK_THROWS((km += PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((km += PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((km += PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((km += PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS((km -= PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((km -= PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((km -= PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS(km > h)
            .CHECK_THROWS(km < h)
            .CHECK_THROWS(km >= h)
            .CHECK_THROWS(km <= h)
            .CHECK_THROWS(km != h)
            .CHECK_THROWS(km == h)
            .CHECK_THROWS((km += PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((km += PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((km += PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((km += PhysicalNumber(100, Unit::HOUR)))
            .CHECK_THROWS((km -= PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((km -= PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((km -= PhysicalNumber(100, Unit::HOUR)))
            ///////////////////////////////////////////////////////////////////
            .setname("TIME with LENGTH")
            // SEC
            .CHECK_THROWS(s + cm)
            .CHECK_THROWS(s + met)
            .CHECK_THROWS(s + km)
            .CHECK_THROWS(s - cm)
            .CHECK_THROWS(s - met)
            .CHECK_THROWS(s - km)
            .CHECK_THROWS(s > cm)
            .CHECK_THROWS(s < cm)
            .CHECK_THROWS(s >= cm)
            .CHECK_THROWS(s <= cm)
            .CHECK_THROWS(s != cm)
            .CHECK_THROWS(s == cm)
            .CHECK_THROWS((s += PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((s += PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((s += PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((s += PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS((s -= PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((s -= PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((s -= PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS(s > met)
            .CHECK_THROWS(s < met)
            .CHECK_THROWS(s >= met)
            .CHECK_THROWS(s <= met)
            .CHECK_THROWS(s != met)
            .CHECK_THROWS(s == met)
            .CHECK_THROWS((s += PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((s += PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((s += PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((s += PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS((s -= PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((s -= PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((s -= PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS(s > km)
            .CHECK_THROWS(s < km)
            .CHECK_THROWS(s >= km)
            .CHECK_THROWS(s <= km)
            .CHECK_THROWS(s != km)
            .CHECK_THROWS(s == km)
            .CHECK_THROWS((s += PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((s += PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((s += PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((s += PhysicalNumber(100, Unit::KM)))
            .CHECK_THROWS((s -= PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((s -= PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((s -= PhysicalNumber(100, Unit::KM)))
            // MIN
            .CHECK_THROWS(min + cm)
            .CHECK_THROWS(min + met)
            .CHECK_THROWS(min + km)
            .CHECK_THROWS(min - cm)
            .CHECK_THROWS(min - met)
            .CHECK_THROWS(min - km)
            .CHECK_THROWS(min > cm)
            .CHECK_THROWS(min < cm)
            .CHECK_THROWS(min >= cm)
            .CHECK_THROWS(min <= cm)
            .CHECK_THROWS(min != cm)
            .CHECK_THROWS(min == cm)
            .CHECK_THROWS((min += PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((min += PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((min += PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((min += PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS((min -= PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((min -= PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((min -= PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS(min > met)
            .CHECK_THROWS(min < met)
            .CHECK_THROWS(min >= met)
            .CHECK_THROWS(min <= met)
            .CHECK_THROWS(min != met)
            .CHECK_THROWS(min == met)
            .CHECK_THROWS((min += PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((min += PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((min += PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((min += PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS((min -= PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((min -= PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((min -= PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS(min > km)
            .CHECK_THROWS(min < km)
            .CHECK_THROWS(min >= km)
            .CHECK_THROWS(min <= km)
            .CHECK_THROWS(min != km)
            .CHECK_THROWS(min == km)
            .CHECK_THROWS((min += PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((min += PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((min += PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((min += PhysicalNumber(100, Unit::KM)))
            .CHECK_THROWS((min -= PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((min -= PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((min -= PhysicalNumber(100, Unit::KM)))
            // HOUR
            .CHECK_THROWS(h + cm)
            .CHECK_THROWS(h + met)
            .CHECK_THROWS(h + km)
            .CHECK_THROWS(h - cm)
            .CHECK_THROWS(h - met)
            .CHECK_THROWS(h - km)
            .CHECK_THROWS(h > cm)
            .CHECK_THROWS(h < cm)
            .CHECK_THROWS(h >= cm)
            .CHECK_THROWS(h <= cm)
            .CHECK_THROWS(h != cm)
            .CHECK_THROWS(h == cm)
            .CHECK_THROWS((h += PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((h += PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((h += PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((h += PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS((h -= PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((h -= PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((h -= PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS(h > met)
            .CHECK_THROWS(h < met)
            .CHECK_THROWS(h >= met)
            .CHECK_THROWS(h <= met)
            .CHECK_THROWS(h != met)
            .CHECK_THROWS(h == met)
            .CHECK_THROWS((h += PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((h += PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((h += PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((h += PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS((h -= PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((h -= PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((h -= PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS(h > km)
            .CHECK_THROWS(h < km)
            .CHECK_THROWS(h >= km)
            .CHECK_THROWS(h <= km)
            .CHECK_THROWS(h != km)
            .CHECK_THROWS(h == km)
            .CHECK_THROWS((h += PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((h += PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((h += PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((h += PhysicalNumber(100, Unit::KM)))
            .CHECK_THROWS((h -= PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((h -= PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((h -= PhysicalNumber(100, Unit::KM)))
            ///////////////////////////////////////////////////////////////////
            .setname("TIME with WEIGHT")
            // SEC
            .CHECK_THROWS(s + g)
            .CHECK_THROWS(s + kg)
            .CHECK_THROWS(s + t)
            .CHECK_THROWS(s - g)
            .CHECK_THROWS(s - kg)
            .CHECK_THROWS(s - t)
            .CHECK_THROWS(s > g)
            .CHECK_THROWS(s < g)
            .CHECK_THROWS(s >= g)
            .CHECK_THROWS(s <= g)
            .CHECK_THROWS(s != g)
            .CHECK_THROWS(s == g)
            .CHECK_THROWS((s += PhysicalNumber(1, Unit::G)))
            .CHECK_THROWS((s += PhysicalNumber(0, Unit::G)))
            .CHECK_THROWS((s += PhysicalNumber(-1, Unit::G)))
            .CHECK_THROWS((s += PhysicalNumber(100, Unit::G)))
            .CHECK_THROWS((s -= PhysicalNumber(1, Unit::G)))
            .CHECK_THROWS((s -= PhysicalNumber(0, Unit::G)))
            .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::G)))
            .CHECK_THROWS((s -= PhysicalNumber(100, Unit::G)))
            .CHECK_THROWS(s > kg)
            .CHECK_THROWS(s < kg)
            .CHECK_THROWS(s >= kg)
            .CHECK_THROWS(s <= kg)
            .CHECK_THROWS(s != kg)
            .CHECK_THROWS(s == kg)
            .CHECK_THROWS((s += PhysicalNumber(1, Unit::KG)))
            .CHECK_THROWS((s += PhysicalNumber(0, Unit::KG)))
            .CHECK_THROWS((s += PhysicalNumber(-1, Unit::KG)))
            .CHECK_THROWS((s += PhysicalNumber(100, Unit::KG)))
            .CHECK_THROWS((s -= PhysicalNumber(1, Unit::KG)))
            .CHECK_THROWS((s -= PhysicalNumber(0, Unit::KG)))
            .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::KG)))
            .CHECK_THROWS((s -= PhysicalNumber(100, Unit::KG)))
            .CHECK_THROWS(s > t)
            .CHECK_THROWS(s < t)
            .CHECK_THROWS(s >= t)
            .CHECK_THROWS(s <= t)
            .CHECK_THROWS(s != t)
            .CHECK_THROWS(s == t)
            .CHECK_THROWS((s += PhysicalNumber(1, Unit::TON)))
            .CHECK_THROWS((s += PhysicalNumber(0, Unit::TON)))
            .CHECK_THROWS((s += PhysicalNumber(-1, Unit::TON)))
            .CHECK_THROWS((s += PhysicalNumber(100, Unit::TON)))
            .CHECK_THROWS((s -= PhysicalNumber(1, Unit::TON)))
            .CHECK_THROWS((s -= PhysicalNumber(0, Unit::TON)))
            .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::TON)))
            .CHECK_THROWS((s -= PhysicalNumber(100, Unit::TON)))
            // MIN
            .CHECK_THROWS(min + g)
            .CHECK_THROWS(min + kg)
            .CHECK_THROWS(min + t)
            .CHECK_THROWS(min - g)
            .CHECK_THROWS(min - kg)
            .CHECK_THROWS(min - t)
            .CHECK_THROWS(min > g)
            .CHECK_THROWS(min < g)
            .CHECK_THROWS(min >= g)
            .CHECK_THROWS(min <= g)
            .CHECK_THROWS(min != g)
            .CHECK_THROWS(min == g)
            .CHECK_THROWS((min += PhysicalNumber(1, Unit::G)))
            .CHECK_THROWS((min += PhysicalNumber(0, Unit::G)))
            .CHECK_THROWS((min += PhysicalNumber(-1, Unit::G)))
            .CHECK_THROWS((min += PhysicalNumber(100, Unit::G)))
            .CHECK_THROWS((min -= PhysicalNumber(1, Unit::G)))
            .CHECK_THROWS((min -= PhysicalNumber(0, Unit::G)))
            .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::G)))
            .CHECK_THROWS((min -= PhysicalNumber(100, Unit::G)))
            .CHECK_THROWS(min > kg)
            .CHECK_THROWS(min < kg)
            .CHECK_THROWS(min >= kg)
            .CHECK_THROWS(min <= kg)
            .CHECK_THROWS(min != kg)
            .CHECK_THROWS(min == kg)
            .CHECK_THROWS((min += PhysicalNumber(1, Unit::KG)))
            .CHECK_THROWS((min += PhysicalNumber(0, Unit::KG)))
            .CHECK_THROWS((min += PhysicalNumber(-1, Unit::KG)))
            .CHECK_THROWS((min += PhysicalNumber(100, Unit::KG)))
            .CHECK_THROWS((min -= PhysicalNumber(1, Unit::KG)))
            .CHECK_THROWS((min -= PhysicalNumber(0, Unit::KG)))
            .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::KG)))
            .CHECK_THROWS((min -= PhysicalNumber(100, Unit::KG)))
            .CHECK_THROWS(min > t)
            .CHECK_THROWS(min < t)
            .CHECK_THROWS(min >= t)
            .CHECK_THROWS(min <= t)
            .CHECK_THROWS(min != t)
            .CHECK_THROWS(min == t)
            .CHECK_THROWS((min += PhysicalNumber(1, Unit::TON)))
            .CHECK_THROWS((min += PhysicalNumber(0, Unit::TON)))
            .CHECK_THROWS((min += PhysicalNumber(-1, Unit::TON)))
            .CHECK_THROWS((min += PhysicalNumber(100, Unit::TON)))
            .CHECK_THROWS((min -= PhysicalNumber(1, Unit::TON)))
            .CHECK_THROWS((min -= PhysicalNumber(0, Unit::TON)))
            .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::TON)))
            .CHECK_THROWS((min -= PhysicalNumber(100, Unit::TON)))
            // HOUR
            .CHECK_THROWS(h + g)
            .CHECK_THROWS(h + kg)
            .CHECK_THROWS(h + t)
            .CHECK_THROWS(h - g)
            .CHECK_THROWS(h - kg)
            .CHECK_THROWS(h - t)
            .CHECK_THROWS(h > g)
            .CHECK_THROWS(h < g)
            .CHECK_THROWS(h >= g)
            .CHECK_THROWS(h <= g)
            .CHECK_THROWS(h != g)
            .CHECK_THROWS(h == g)
            .CHECK_THROWS((h += PhysicalNumber(1, Unit::G)))
            .CHECK_THROWS((h += PhysicalNumber(0, Unit::G)))
            .CHECK_THROWS((h += PhysicalNumber(-1, Unit::G)))
            .CHECK_THROWS((h += PhysicalNumber(100, Unit::G)))
            .CHECK_THROWS((h -= PhysicalNumber(1, Unit::G)))
            .CHECK_THROWS((h -= PhysicalNumber(0, Unit::G)))
            .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::G)))
            .CHECK_THROWS((h -= PhysicalNumber(100, Unit::G)))
            .CHECK_THROWS(h > kg)
            .CHECK_THROWS(h < kg)
            .CHECK_THROWS(h >= kg)
            .CHECK_THROWS(h <= kg)
            .CHECK_THROWS(h != kg)
            .CHECK_THROWS(h == kg)
            .CHECK_THROWS((h += PhysicalNumber(1, Unit::KG)))
            .CHECK_THROWS((h += PhysicalNumber(0, Unit::KG)))
            .CHECK_THROWS((h += PhysicalNumber(-1, Unit::KG)))
            .CHECK_THROWS((h += PhysicalNumber(100, Unit::KG)))
            .CHECK_THROWS((h -= PhysicalNumber(1, Unit::KG)))
            .CHECK_THROWS((h -= PhysicalNumber(0, Unit::KG)))
            .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::KG)))
            .CHECK_THROWS((h -= PhysicalNumber(100, Unit::KG)))
            .CHECK_THROWS(h > t)
            .CHECK_THROWS(h < t)
            .CHECK_THROWS(h >= t)
            .CHECK_THROWS(h <= t)
            .CHECK_THROWS(h != t)
            .CHECK_THROWS(h == t)
            .CHECK_THROWS((h += PhysicalNumber(1, Unit::TON)))
            .CHECK_THROWS((h += PhysicalNumber(0, Unit::TON)))
            .CHECK_THROWS((h += PhysicalNumber(-1, Unit::TON)))
            .CHECK_THROWS((h += PhysicalNumber(100, Unit::TON)))
            .CHECK_THROWS((h -= PhysicalNumber(1, Unit::TON)))
            .CHECK_THROWS((h -= PhysicalNumber(0, Unit::TON)))
            .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::TON)))
            .CHECK_THROWS((h -= PhysicalNumber(100, Unit::TON)))
            ///////////////////////////////////////////////////////////////////
            .setname("LENGTH with WEIGHT")
            // CM
            .CHECK_THROWS(cm + g)
            .CHECK_THROWS(cm + kg)
            .CHECK_THROWS(cm + t)
            .CHECK_THROWS(cm - g)
            .CHECK_THROWS(cm - kg)
            .CHECK_THROWS(cm - t)
            .CHECK_THROWS(cm > g)
            .CHECK_THROWS(cm < g)
            .CHECK_THROWS(cm >= g)
            .CHECK_THROWS(cm <= g)
            .CHECK_THROWS(cm != g)
            .CHECK_THROWS(cm == g)
            .CHECK_THROWS((cm += PhysicalNumber(1, Unit::G)))
            .CHECK_THROWS((cm += PhysicalNumber(0, Unit::G)))
            .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::G)))
            .CHECK_THROWS((cm += PhysicalNumber(100, Unit::G)))
            .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::G)))
            .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::G)))
            .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::G)))
            .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::G)))
            .CHECK_THROWS(cm > kg)
            .CHECK_THROWS(cm < kg)
            .CHECK_THROWS(cm >= kg)
            .CHECK_THROWS(cm <= kg)
            .CHECK_THROWS(cm != kg)
            .CHECK_THROWS(cm == kg)
            .CHECK_THROWS((cm += PhysicalNumber(1, Unit::KG)))
            .CHECK_THROWS((cm += PhysicalNumber(0, Unit::KG)))
            .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::KG)))
            .CHECK_THROWS((cm += PhysicalNumber(100, Unit::KG)))
            .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::KG)))
            .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::KG)))
            .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::KG)))
            .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::KG)))
            .CHECK_THROWS(cm > t)
            .CHECK_THROWS(cm < t)
            .CHECK_THROWS(cm >= t)
            .CHECK_THROWS(cm <= t)
            .CHECK_THROWS(cm != t)
            .CHECK_THROWS(cm == t)
            .CHECK_THROWS((cm += PhysicalNumber(1, Unit::TON)))
            .CHECK_THROWS((cm += PhysicalNumber(0, Unit::TON)))
            .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::TON)))
            .CHECK_THROWS((cm += PhysicalNumber(100, Unit::TON)))
            .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::TON)))
            .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::TON)))
            .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::TON)))
            .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::TON)))
            // METER
            .CHECK_THROWS(met + g)
            .CHECK_THROWS(met + kg)
            .CHECK_THROWS(met + t)
            .CHECK_THROWS(met - g)
            .CHECK_THROWS(met - kg)
            .CHECK_THROWS(met - t)
            .CHECK_THROWS(met > g)
            .CHECK_THROWS(met < g)
            .CHECK_THROWS(met >= g)
            .CHECK_THROWS(met <= g)
            .CHECK_THROWS(met != g)
            .CHECK_THROWS(met == g)
            .CHECK_THROWS((met += PhysicalNumber(1, Unit::G)))
            .CHECK_THROWS((met += PhysicalNumber(0, Unit::G)))
            .CHECK_THROWS((met += PhysicalNumber(-1, Unit::G)))
            .CHECK_THROWS((met += PhysicalNumber(100, Unit::G)))
            .CHECK_THROWS((met -= PhysicalNumber(1, Unit::G)))
            .CHECK_THROWS((met -= PhysicalNumber(0, Unit::G)))
            .CHECK_THROWS((met -= PhysicalNumber(-1, Unit::G)))
            .CHECK_THROWS((met -= PhysicalNumber(100, Unit::G)))
            .CHECK_THROWS(met > kg)
            .CHECK_THROWS(met < kg)
            .CHECK_THROWS(met >= kg)
            .CHECK_THROWS(met <= kg)
            .CHECK_THROWS(met != kg)
            .CHECK_THROWS(met == kg)
            .CHECK_THROWS((met += PhysicalNumber(1, Unit::KG)))
            .CHECK_THROWS((met += PhysicalNumber(0, Unit::KG)))
            .CHECK_THROWS((met += PhysicalNumber(-1, Unit::KG)))
            .CHECK_THROWS((met += PhysicalNumber(100, Unit::KG)))
            .CHECK_THROWS((met -= PhysicalNumber(1, Unit::KG)))
            .CHECK_THROWS((met -= PhysicalNumber(0, Unit::KG)))
            .CHECK_THROWS((met -= PhysicalNumber(-1, Unit::KG)))
            .CHECK_THROWS((met -= PhysicalNumber(100, Unit::KG)))
            .CHECK_THROWS(met > t)
            .CHECK_THROWS(met < t)
            .CHECK_THROWS(met >= t)
            .CHECK_THROWS(met <= t)
            .CHECK_THROWS(met != t)
            .CHECK_THROWS(met == t)
            .CHECK_THROWS((met += PhysicalNumber(1, Unit::TON)))
            .CHECK_THROWS((met += PhysicalNumber(0, Unit::TON)))
            .CHECK_THROWS((met += PhysicalNumber(-1, Unit::TON)))
            .CHECK_THROWS((met += PhysicalNumber(100, Unit::TON)))
            .CHECK_THROWS((met -= PhysicalNumber(1, Unit::TON)))
            .CHECK_THROWS((met -= PhysicalNumber(0, Unit::TON)))
            .CHECK_THROWS((met -= PhysicalNumber(-1, Unit::TON)))
            .CHECK_THROWS((met -= PhysicalNumber(100, Unit::TON)))
            // KM
            .CHECK_THROWS(km + g)
            .CHECK_THROWS(km + kg)
            .CHECK_THROWS(km + t)
            .CHECK_THROWS(km - g)
            .CHECK_THROWS(km - kg)
            .CHECK_THROWS(km - t)
            .CHECK_THROWS(km > g)
            .CHECK_THROWS(km < g)
            .CHECK_THROWS(km >= g)
            .CHECK_THROWS(km <= g)
            .CHECK_THROWS(km != g)
            .CHECK_THROWS(km == g)
            .CHECK_THROWS((km += PhysicalNumber(1, Unit::G)))
            .CHECK_THROWS((km += PhysicalNumber(0, Unit::G)))
            .CHECK_THROWS((km += PhysicalNumber(-1, Unit::G)))
            .CHECK_THROWS((km += PhysicalNumber(100, Unit::G)))
            .CHECK_THROWS((km -= PhysicalNumber(1, Unit::G)))
            .CHECK_THROWS((km -= PhysicalNumber(0, Unit::G)))
            .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::G)))
            .CHECK_THROWS((km -= PhysicalNumber(100, Unit::G)))
            .CHECK_THROWS(km > kg)
            .CHECK_THROWS(km < kg)
            .CHECK_THROWS(km >= kg)
            .CHECK_THROWS(km <= kg)
            .CHECK_THROWS(km != kg)
            .CHECK_THROWS(km == kg)
            .CHECK_THROWS((km += PhysicalNumber(1, Unit::KG)))
            .CHECK_THROWS((km += PhysicalNumber(0, Unit::KG)))
            .CHECK_THROWS((km += PhysicalNumber(-1, Unit::KG)))
            .CHECK_THROWS((km += PhysicalNumber(100, Unit::KG)))
            .CHECK_THROWS((km -= PhysicalNumber(1, Unit::KG)))
            .CHECK_THROWS((km -= PhysicalNumber(0, Unit::KG)))
            .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::KG)))
            .CHECK_THROWS((km -= PhysicalNumber(100, Unit::KG)))
            .CHECK_THROWS(km > t)
            .CHECK_THROWS(km < t)
            .CHECK_THROWS(km >= t)
            .CHECK_THROWS(km <= t)
            .CHECK_THROWS(km != t)
            .CHECK_THROWS(km == t)
            .CHECK_THROWS((km += PhysicalNumber(1, Unit::TON)))
            .CHECK_THROWS((km += PhysicalNumber(0, Unit::TON)))
            .CHECK_THROWS((km += PhysicalNumber(-1, Unit::TON)))
            .CHECK_THROWS((km += PhysicalNumber(100, Unit::TON)))
            .CHECK_THROWS((km -= PhysicalNumber(1, Unit::TON)))
            .CHECK_THROWS((km -= PhysicalNumber(0, Unit::TON)))
            .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::TON)))
            .CHECK_THROWS((km -= PhysicalNumber(100, Unit::TON)))
            ///////////////////////////////////////////////////////////////////
            .setname("WEIGHT with TIME")
            // G
            .CHECK_THROWS(g + s)
            .CHECK_THROWS(g + min)
            .CHECK_THROWS(g + h)
            .CHECK_THROWS(g - s)
            .CHECK_THROWS(g - min)
            .CHECK_THROWS(g - h)
            .CHECK_THROWS(g > s)
            .CHECK_THROWS(g < s)
            .CHECK_THROWS(g >= s)
            .CHECK_THROWS(g <= s)
            .CHECK_THROWS(g != s)
            .CHECK_THROWS(g == s)
            .CHECK_THROWS((g += PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((g += PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((g += PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((g += PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS((g -= PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((g -= PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((g -= PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((g -= PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS(g > min)
            .CHECK_THROWS(g < min)
            .CHECK_THROWS(g >= min)
            .CHECK_THROWS(g <= min)
            .CHECK_THROWS(g != min)
            .CHECK_THROWS(g == min)
            .CHECK_THROWS((g += PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((g += PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((g += PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((g += PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS((g -= PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((g -= PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((g -= PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((g -= PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS(g > h)
            .CHECK_THROWS(g < h)
            .CHECK_THROWS(g >= h)
            .CHECK_THROWS(g <= h)
            .CHECK_THROWS(g != h)
            .CHECK_THROWS(g == h)
            .CHECK_THROWS((g += PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((g += PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((g += PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((g += PhysicalNumber(100, Unit::HOUR)))
            .CHECK_THROWS((g -= PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((g -= PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((g -= PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((g -= PhysicalNumber(100, Unit::HOUR)))
            // KG
            .CHECK_THROWS(kg + s)
            .CHECK_THROWS(kg + min)
            .CHECK_THROWS(kg + h)
            .CHECK_THROWS(kg - s)
            .CHECK_THROWS(kg - min)
            .CHECK_THROWS(kg - h)
            .CHECK_THROWS(kg > s)
            .CHECK_THROWS(kg < s)
            .CHECK_THROWS(kg >= s)
            .CHECK_THROWS(kg <= s)
            .CHECK_THROWS(kg != s)
            .CHECK_THROWS(kg == s)
            .CHECK_THROWS((kg += PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((kg += PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((kg += PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((kg += PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS((kg -= PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((kg -= PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((kg -= PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((kg -= PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS(kg > min)
            .CHECK_THROWS(kg < min)
            .CHECK_THROWS(kg >= min)
            .CHECK_THROWS(kg <= min)
            .CHECK_THROWS(kg != min)
            .CHECK_THROWS(kg == min)
            .CHECK_THROWS((kg += PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((kg += PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((kg += PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((kg += PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS((kg -= PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((kg -= PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((kg -= PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((kg -= PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS(kg > h)
            .CHECK_THROWS(kg < h)
            .CHECK_THROWS(kg >= h)
            .CHECK_THROWS(kg <= h)
            .CHECK_THROWS(kg != h)
            .CHECK_THROWS(kg == h)
            .CHECK_THROWS((kg += PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((kg += PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((kg += PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((kg += PhysicalNumber(100, Unit::HOUR)))
            .CHECK_THROWS((kg -= PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((kg -= PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((kg -= PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((kg -= PhysicalNumber(100, Unit::HOUR)))
            // TON
            .CHECK_THROWS(t + s)
            .CHECK_THROWS(t + min)
            .CHECK_THROWS(t + h)
            .CHECK_THROWS(t - s)
            .CHECK_THROWS(t - min)
            .CHECK_THROWS(t - h)
            .CHECK_THROWS(t > s)
            .CHECK_THROWS(t < s)
            .CHECK_THROWS(t >= s)
            .CHECK_THROWS(t <= s)
            .CHECK_THROWS(t != s)
            .CHECK_THROWS(t == s)
            .CHECK_THROWS((t += PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((t += PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((t += PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((t += PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS((t -= PhysicalNumber(1, Unit::SEC)))
            .CHECK_THROWS((t -= PhysicalNumber(0, Unit::SEC)))
            .CHECK_THROWS((t -= PhysicalNumber(-1, Unit::SEC)))
            .CHECK_THROWS((t -= PhysicalNumber(100, Unit::SEC)))
            .CHECK_THROWS(t > min)
            .CHECK_THROWS(t < min)
            .CHECK_THROWS(t >= min)
            .CHECK_THROWS(t <= min)
            .CHECK_THROWS(t != min)
            .CHECK_THROWS(t == min)
            .CHECK_THROWS((t += PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((t += PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((t += PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((t += PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS((t -= PhysicalNumber(1, Unit::MIN)))
            .CHECK_THROWS((t -= PhysicalNumber(0, Unit::MIN)))
            .CHECK_THROWS((t -= PhysicalNumber(-1, Unit::MIN)))
            .CHECK_THROWS((t -= PhysicalNumber(100, Unit::MIN)))
            .CHECK_THROWS(t > h)
            .CHECK_THROWS(t < h)
            .CHECK_THROWS(t >= h)
            .CHECK_THROWS(t <= h)
            .CHECK_THROWS(t != h)
            .CHECK_THROWS(t == h)
            .CHECK_THROWS((t += PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((t += PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((t += PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((t += PhysicalNumber(100, Unit::HOUR)))
            .CHECK_THROWS((t -= PhysicalNumber(1, Unit::HOUR)))
            .CHECK_THROWS((t -= PhysicalNumber(0, Unit::HOUR)))
            .CHECK_THROWS((t -= PhysicalNumber(-1, Unit::HOUR)))
            .CHECK_THROWS((t -= PhysicalNumber(100, Unit::HOUR)))
            ///////////////////////////////////////////////////////////////////
            .setname("WEIGHT with LENGTH")
            // G
            .CHECK_THROWS(g + cm)
            .CHECK_THROWS(g + met)
            .CHECK_THROWS(g + km)
            .CHECK_THROWS(g - cm)
            .CHECK_THROWS(g - met)
            .CHECK_THROWS(g - km)
            .CHECK_THROWS(g > cm)
            .CHECK_THROWS(g < cm)
            .CHECK_THROWS(g >= cm)
            .CHECK_THROWS(g <= cm)
            .CHECK_THROWS(g != cm)
            .CHECK_THROWS(g == cm)
            .CHECK_THROWS((g += PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((g += PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((g += PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((g += PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS((g -= PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((g -= PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((g -= PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((g -= PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS(g > met)
            .CHECK_THROWS(g < met)
            .CHECK_THROWS(g >= met)
            .CHECK_THROWS(g <= met)
            .CHECK_THROWS(g != met)
            .CHECK_THROWS(g == met)
            .CHECK_THROWS((g += PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((g += PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((g += PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((g += PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS((g -= PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((g -= PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((g -= PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((g -= PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS(g > km)
            .CHECK_THROWS(g < km)
            .CHECK_THROWS(g >= km)
            .CHECK_THROWS(g <= km)
            .CHECK_THROWS(g != km)
            .CHECK_THROWS(g == km)
            .CHECK_THROWS((g += PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((g += PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((g += PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((g += PhysicalNumber(100, Unit::KM)))
            .CHECK_THROWS((g -= PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((g -= PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((g -= PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((g -= PhysicalNumber(100, Unit::KM)))
            // KG
            .CHECK_THROWS(kg + cm)
            .CHECK_THROWS(kg + met)
            .CHECK_THROWS(kg + km)
            .CHECK_THROWS(kg - cm)
            .CHECK_THROWS(kg - met)
            .CHECK_THROWS(kg - km)
            .CHECK_THROWS(kg > cm)
            .CHECK_THROWS(kg < cm)
            .CHECK_THROWS(kg >= cm)
            .CHECK_THROWS(kg <= cm)
            .CHECK_THROWS(kg != cm)
            .CHECK_THROWS(kg == cm)
            .CHECK_THROWS((kg += PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((kg += PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((kg += PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((kg += PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS((kg -= PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((kg -= PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((kg -= PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((kg -= PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS(kg > met)
            .CHECK_THROWS(kg < met)
            .CHECK_THROWS(kg >= met)
            .CHECK_THROWS(kg <= met)
            .CHECK_THROWS(kg != met)
            .CHECK_THROWS(kg == met)
            .CHECK_THROWS((kg += PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((kg += PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((kg += PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((kg += PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS((kg -= PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((kg -= PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((kg -= PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((kg -= PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS(kg > km)
            .CHECK_THROWS(kg < km)
            .CHECK_THROWS(kg >= km)
            .CHECK_THROWS(kg <= km)
            .CHECK_THROWS(kg != km)
            .CHECK_THROWS(kg == km)
            .CHECK_THROWS((kg += PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((kg += PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((kg += PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((kg += PhysicalNumber(100, Unit::KM)))
            .CHECK_THROWS((kg -= PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((kg -= PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((kg -= PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((kg -= PhysicalNumber(100, Unit::KM)))
            // TON
            .CHECK_THROWS(t + cm)
            .CHECK_THROWS(t + met)
            .CHECK_THROWS(t + km)
            .CHECK_THROWS(t - cm)
            .CHECK_THROWS(t - met)
            .CHECK_THROWS(t - km)
            .CHECK_THROWS(t > cm)
            .CHECK_THROWS(t < cm)
            .CHECK_THROWS(t >= cm)
            .CHECK_THROWS(t <= cm)
            .CHECK_THROWS(t != cm)
            .CHECK_THROWS(t == cm)
            .CHECK_THROWS((t += PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((t += PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((t += PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((t += PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS((t -= PhysicalNumber(1, Unit::CM)))
            .CHECK_THROWS((t -= PhysicalNumber(0, Unit::CM)))
            .CHECK_THROWS((t -= PhysicalNumber(-1, Unit::CM)))
            .CHECK_THROWS((t -= PhysicalNumber(100, Unit::CM)))
            .CHECK_THROWS(t > met)
            .CHECK_THROWS(t < met)
            .CHECK_THROWS(t >= met)
            .CHECK_THROWS(t <= met)
            .CHECK_THROWS(t != met)
            .CHECK_THROWS(t == met)
            .CHECK_THROWS((t += PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((t += PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((t += PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((t += PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS((t -= PhysicalNumber(1, Unit::M)))
            .CHECK_THROWS((t -= PhysicalNumber(0, Unit::M)))
            .CHECK_THROWS((t -= PhysicalNumber(-1, Unit::M)))
            .CHECK_THROWS((t -= PhysicalNumber(100, Unit::M)))
            .CHECK_THROWS(t > km)
            .CHECK_THROWS(t < km)
            .CHECK_THROWS(t >= km)
            .CHECK_THROWS(t <= km)
            .CHECK_THROWS(t != km)
            .CHECK_THROWS(t == km)
            .CHECK_THROWS((t += PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((t += PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((t += PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((t += PhysicalNumber(100, Unit::KM)))
            .CHECK_THROWS((t -= PhysicalNumber(1, Unit::KM)))
            .CHECK_THROWS((t -= PhysicalNumber(0, Unit::KM)))
            .CHECK_THROWS((t -= PhysicalNumber(-1, Unit::KM)))
            .CHECK_THROWS((t -= PhysicalNumber(100, Unit::KM)))
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            .setname("Basic output")
            .CHECK_OUTPUT(cm, "10.0[cm]")
            .CHECK_OUTPUT(met, "5.3[m]")
            .CHECK_OUTPUT(km, "3.3[km]")
            .setname("Compatible dimensions")
            // CM with CM
            .CHECK_OUTPUT(cm + cm, "20.0[cm]")
            .CHECK_OUTPUT((cm += cm), "20.0[cm]")
            .CHECK_OK(istringstream("10.0[cm]") >> cm)
            .CHECK_OUTPUT(cm - cm, "0[cm]")
            .CHECK_OUTPUT((cm -= cm), "0[cm]")
            .CHECK_OK(istringstream("10.0[cm]") >> cm)
            // CM with METER
            .CHECK_OUTPUT(cm + met, "540.0[cm]")
            .CHECK_OUTPUT((cm += met), "540.0[cm]")
            .CHECK_OK(istringstream("10.0[cm]") >> cm)
            .CHECK_OUTPUT(cm - met, "-520[cm]")
            .CHECK_OUTPUT((cm -= met), "-520[cm]")
            .CHECK_OK(istringstream("10.0[cm]") >> cm)
            // CM with KM
            .CHECK_OUTPUT(cm + km, "330010.0[cm]")
            .CHECK_OUTPUT((cm += km), "330010.0[cm]")
            .CHECK_OK(istringstream("10.0[cm]") >> cm)
            .CHECK_OUTPUT(cm - met, "-329990[cm]")
            .CHECK_OUTPUT((cm -= met), "-329990[cm]")
            .CHECK_OK(istringstream("10.0[cm]") >> cm)
            ///////////////////////////////////////////////////////////
            // METER with CM
            .CHECK_OUTPUT(met + cm, "5.4[m]")
            .CHECK_OUTPUT((met += cm), "5.4[m]")
            .CHECK_OK(istringstream("5.3[m]") >> met)
            .CHECK_OUTPUT(met - cm, "5.2[m]")
            .CHECK_OUTPUT((met -= cm), "5.2[m]")
            .CHECK_OK(istringstream("5.3[m]") >> met)
            // METER with METER
            .CHECK_OUTPUT(met + met, "10.6[m]")
            .CHECK_OUTPUT((met += met), "10.6[m]")
            .CHECK_OK(istringstream("5.3[m]") >> met)
            .CHECK_OUTPUT(met - met, "0[m]")
            .CHECK_OUTPUT((met -= met), "0[m]")
            .CHECK_OK(istringstream("5.3[m]") >> met)
            // METER with KM
            .CHECK_OUTPUT(met + km, "3305.3[m]")
            .CHECK_OUTPUT((met += km), "3305.3[m]")
            .CHECK_OK(istringstream("5.3[m]") >> met)
            .CHECK_OUTPUT(met - km, "-3294.7[m]")
            .CHECK_OUTPUT((met -= km), "-3294.7[m]")
            .CHECK_OK(istringstream("5.3[m]") >> met)
            ///////////////////////////////////////////////////////////
            // KM with CM
            .CHECK_OUTPUT(km + cm, "3.3001[km]")
            .CHECK_OUTPUT((km += cm), "3.3001[km]")
            .CHECK_OK(istringstream("3.3[km]") >> km)
            .CHECK_OUTPUT(km - cm, "3.2999[km]")
            .CHECK_OUTPUT((km -= cm), "3.2999[km]")
            .CHECK_OK(istringstream("3.3[km]") >> km)
            // KM with METER
            .CHECK_OUTPUT(km + met, "3.3053[km]")
            .CHECK_OUTPUT((km += met), "3.3053[km]")
            .CHECK_OK(istringstream("3.3[km]") >> km)
            .CHECK_OUTPUT(km - met, "3.2947[km]")
            .CHECK_OUTPUT((km -= met), "3.2947[km]")
            .CHECK_OK(istringstream("3.3[km]") >> km)
            // KM with KM
            .CHECK_OUTPUT(km + km, "6.6[km]")
            .CHECK_OUTPUT((km += km), "6.6[km]")
            .CHECK_OK(istringstream("3.3[km]") >> km)
            .CHECK_OUTPUT(km - km, "0[km]")
            .CHECK_OUTPUT((km -= km), "0[km]")
            .CHECK_OK(istringstream("3.3[km]") >> km)
            .CHECK_OUTPUT((km += PhysicalNumber(6, Unit::KM)), "9.3[km]")
            .CHECK_OUTPUT((km -= PhysicalNumber(2, Unit::KM)), "7.3[km]")
            .CHECK_OUTPUT((met += PhysicalNumber(4.2, Unit::M)), "9.5[m]")
            .CHECK_OUTPUT((met -= PhysicalNumber(2.1, Unit::M)), "7.4[m]")
            .CHECK_OUTPUT((cm += PhysicalNumber(600, Unit::CM)), "610[cm]")
            .CHECK_OUTPUT((cm -= PhysicalNumber(0, Unit::M)), "610[cm]")
            .setname("boolean")
            .CHECK_EQUAL(cm == met, false)
            .CHECK_EQUAL(met == km, false)
            .CHECK_EQUAL(cm == cm, true)
            .CHECK_EQUAL(cm == PhysicalNumber(6.1, Unit::M), true)
            .CHECK_EQUAL(cm == PhysicalNumber(0.0061, Unit::KM), true)
            .CHECK_EQUAL(cm != PhysicalNumber(6.1, Unit::M), false)
            .CHECK_EQUAL(cm > PhysicalNumber(0.0061, Unit::KM), false)
            .CHECK_EQUAL(met < PhysicalNumber(7.5, Unit::M), true)
            .CHECK_EQUAL(cm >= PhysicalNumber(0.0061, Unit::KM), true)
            .CHECK_EQUAL(km >= PhysicalNumber(3, Unit::CM), true)
            .setname("unary")
            .CHECK_EQUAL(+a1, PhysicalNumber(2, Unit::CM))
            .CHECK_EQUAL(+PhysicalNumber(-2, Unit::CM), PhysicalNumber(2, Unit::CM))
            .CHECK_EQUAL(+PhysicalNumber(0, Unit::MIN), PhysicalNumber(0, Unit::MIN))
            .CHECK_EQUAL(-PhysicalNumber(1, Unit::MIN), PhysicalNumber(-1, Unit::MIN))
            .CHECK_EQUAL(-met, PhysicalNumber(-7.4, Unit::M))
            .CHECK_EQUAL(-km, PhysicalNumber(-7.3, Unit::KM))
            .setname("postfix++")
            .CHECK_OUTPUT(cm++, "611[cm]")
            .CHECK_OUTPUT(met++, "8.4[m]")
            .CHECK_OUTPUT(km++, "8.3[km]")
            .setname("postfix--")
            .CHECK_OUTPUT(cm--, "610[cm]")
            .CHECK_OUTPUT(met--, "7.4[m]")
            .CHECK_OUTPUT(km--, "7.3[km]")
            .setname("++prefix")
            .CHECK_OUTPUT(++cm, "611[cm]")
            .CHECK_OUTPUT(++met, "8.4[m]")
            .CHECK_OUTPUT(++km, "8.3[km]")
            .setname("--prefix")
            .CHECK_OUTPUT(--cm, "610[cm]")
            .CHECK_OUTPUT(--me, "7.4[m]")
            .CHECK_OUTPUT(--km, "7.3[km]")
            .setname("MISC")
            .setname("Input")
            .CHECK_OK(istringstream("300[kg]") >> kg)
            .CHECK_OUTPUT(kg, "300[kg]")
            .CHECK_OK(istringstream("22[hour]") >> h)
            .CHECK_OUTPUT(h, "22[hour]")
            .CHECK_OK(istringstream("0.3[m]") >> m)
            .CHECK_OUTPUT(m, "0.3[m]")
            .CHECK_OK(istringstream("700[kg]") >> m)
            .CHECK_OUTPUT(m, "700[kg]")
            .CHECK_OK(istringstream("5[m]") >> h)
            .CHECK_OUTPUT(h, "5[m]")

            .print(cout, /*show_grade=*/false);
        grade = testcase.grade();
    }
    else
    {
        testcase.print_signal(signal);
        grade = 0;
    }
    cout << "*** Grade: " << grade << " ***" << endl;
    return grade;
}
